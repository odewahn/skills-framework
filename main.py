import argparse
from slugify import slugify
from jinja2 import Template
import sys


NO_CHATGPT_MSG = "NOT YET GENERATED BY CHATGPT"
ARTIFACT_PATH = "artifacts"
FILES_TO_PASTE_INTO_CHATGPT_PATH = "work/files-to-paste-into-chatgpt"
CHATGPT_RESULTS_PATH = "work/results-from-chatgpt"


# Create an argument parser that can accept a topic as a command-line argument
parser = argparse.ArgumentParser(description="A simple skills framework.")
parser.add_argument("topic", type=str, help="Topic")
parser.add_argument(
    "artifact",
    type=str,
    help="Artifact to create",
    default="skill-framework",
    choices=[
        "skill-framework",
        "knowledge-check-blueprint",
        "skill-framework-verifier",
        "lab-environment-blueprint",
    ],
)

parser.add_argument(
    "--mcp-tools-fn", type=str, help="Path to the MCP tools function file", default=None
)
args = parser.parse_args()


def load_file(file_path, err_msg=None):
    print(f"Reading file from {file_path}")
    try:
        with open(file_path, "r") as file:
            return file.read()
    except FileNotFoundError:
        print(f"Required file not found: {file_path}")
        if err_msg:
            print(err_msg)
        sys.exit(0)


def write_file(file_path, content):
    print(f"Writing file to {file_path}")
    with open(file_path, "w") as file:
        file.write(content)


def render_template(template_str, context):
    template = Template(template_str)
    return template.render(context)


def create_artifact(topic, artifact, metadata={}):
    topic_slug = slugify(topic)
    print(f"Preparing {artifact} for topic {topic}")
    # Load the knowledge check blueprint template
    artifact_template = load_file(f"{ARTIFACT_PATH}/{artifact}.jinja")
    # Render the template with the provided topic and skill plan
    rendered_output = render_template(artifact_template, {"topic": topic, **metadata})
    # Save the result
    write_file(
        f"{FILES_TO_PASTE_INTO_CHATGPT_PATH}/{topic_slug}-{artifact}.md",
        rendered_output,
    )
    # Create the blank file for the user to paste the chatgpt output into
    FILENAME_TO_PASTE_INTO_CHATGPT = (
        f"{FILES_TO_PASTE_INTO_CHATGPT_PATH}/{topic_slug}-{artifact}.md"
    )
    FILENAME_OF_RESULTS_FROM_CHATGPT = (
        f"{CHATGPT_RESULTS_PATH}/{topic_slug}-{artifact}.md"
    )
    # Create the temporary placeholder file
    write_file(
        FILENAME_OF_RESULTS_FROM_CHATGPT,
        f"{NO_CHATGPT_MSG}\n\nPaste {artifact} from chat.openai.com output and EDIT OUT ANY CRUFT",
    )
    print(f"{artifact} written to {FILENAME_TO_PASTE_INTO_CHATGPT}")
    print(f"Paste {FILENAME_TO_PASTE_INTO_CHATGPT} in chat.openai.com")
    print(f"Paste the results FROM chatgpt into {FILENAME_OF_RESULTS_FROM_CHATGPT}")


def check_chatgpt_complete(content, err_msg="An error occurred"):
    if content.startswith(NO_CHATGPT_MSG):
        print(err_msg)
        sys.exit(0)


def main():
    # Load the topic from command-line argument and blow up if topic is not present
    if not args.topic:
        raise ValueError("Topic is required. Use --topic to specify the topic.")

    topic_slug = slugify(args.topic)

    # Create the skill framework first and exit
    if args.artifact == "skill-framework":
        create_artifact(args.topic, args.artifact)
        sys.exit(1)

    # Once we get here, it's assumed that the skill framework has been pasted in from chatgpt
    skill_framework = load_file(
        f"{CHATGPT_RESULTS_PATH}/{topic_slug}-skill-framework.md",
        err_msg=f"Skill framework for topic {args.topic} not found. Please create the skill framework first.",
    )
    check_chatgpt_complete(
        skill_framework,
        err_msg=f"ERROR: Paste {FILES_TO_PASTE_INTO_CHATGPT_PATH}/{topic_slug}-skill-framework.md into chatgpt and copy the results to {CHATGPT_RESULTS_PATH}/{topic_slug}-skill-framework.md.",
    )

    # Now create the requested artifact.  The metadata dict can be expanded as needed.
    if args.artifact == "knowledge-check-blueprint":
        create_artifact(args.topic, args.artifact, {"skill_framework": skill_framework})
    elif args.artifact == "lab-environment-blueprint":
        create_artifact(args.topic, args.artifact, {"skill_framework": skill_framework})
    elif args.artifact == "skill-framework-verifier":
        # Load the MCP tool file that must be provided
        if not args.mcp_tools_fn:
            raise ValueError(
                "MCP tools function file is required for knowledge-check-blueprint. Use --mcp-tools-fn to specify the file."
            )
        mcp_context = load_file(args.mcp_tools_fn)
        create_artifact(
            args.topic,
            args.artifact,
            {"skill_framework": skill_framework, "mcp_context": mcp_context},
        )
    else:
        print(
            "Unknown artifact. Supported artifacts: skill-framework, knowledge-check-blueprint"
        )


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nProcess interrupted by user. Exiting...")
        sys.exit(0)
    except Exception as e:
        print(f"An error occurred: {e}")
        # Print a stack trace for debugging
        import traceback

        traceback.print_exc()
        sys.exit(1)
