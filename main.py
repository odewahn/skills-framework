import argparse
import os
import glob
import shutil
from slugify import slugify
from jinja2 import Template
import sys


NO_CHATGPT_MSG = "NOT YET GENERATED BY CHATGPT"
ARTIFACT_PATH = "artifacts"


# Create an argument parser that can accept a topic as a command-line argument
# set up top-level parser with subcommands
parser = argparse.ArgumentParser(description="A simple skills framework.")
subparsers = parser.add_subparsers(dest="command", required=True)

# 'render' command: render an artifact for a topic
render_parser = subparsers.add_parser("render", help="Render an artifact for a topic")
render_parser.add_argument("topic", type=str, help="Topic")
render_parser.add_argument(
    "artifact",
    type=str,
    help="Artifact to create",
    choices=[
        "skill-framework",
        "knowledge-check-blueprint",
        "skill-framework-verifier",
        "lab-environment-blueprint",
    ],
)
render_parser.add_argument(
    "--mcp-tools-fn", type=str, help="Path to the MCP tools function file", default=None
)

# 'init' command: initialize the workspace (stub)
init_parser = subparsers.add_parser(
    "init",
    help="Initialize a new skills-framework workspace for a topic",
)
init_parser.add_argument("topic", type=str, help="Topic")
init_parser.add_argument(
    "--force",
    action="store_true",
    help="Force re-initialization even if files exist",
)

args = parser.parse_args()


def load_file(file_path, err_msg=None):
    print(f"Reading file from {file_path}")
    try:
        with open(file_path, "r") as file:
            return file.read()
    except FileNotFoundError:
        print(f"Required file not found: {file_path}")
        if err_msg:
            print(err_msg)
        sys.exit(0)


def write_file(file_path, content):
    print(f"Writing file to {file_path}")
    with open(file_path, "w") as file:
        file.write(content)


def render_template(template_str, context):
    template = Template(template_str)
    return template.render(context)


def create_artifact(topic, artifact, metadata={}):
    topic_slug = slugify(topic)
    print(f"Preparing {artifact} for topic {topic}")

    base_dir = os.path.join("work", topic_slug)
    generators_dir = os.path.join(base_dir, "generators")
    os.makedirs(generators_dir, exist_ok=True)

    # Load and render the artifact template
    artifact_template = load_file(f"{ARTIFACT_PATH}/{artifact}.jinja")
    rendered_output = render_template(artifact_template, {"topic": topic, **metadata})

    # Write prompt for ChatGPT
    prompt_path = os.path.join(generators_dir, f"{artifact}.md")
    write_file(prompt_path, rendered_output)

    # Create placeholder for ChatGPT results
    result_path = os.path.join(base_dir, f"{artifact}.md")
    write_file(
        result_path,
        f"{NO_CHATGPT_MSG}\n\nPaste {artifact} from chat.openai.com output and EDIT OUT ANY CRUFT",
    )

    print(f"{artifact} written to {prompt_path}")
    print(f"Paste {prompt_path} into chat.openai.com")
    print(f"Paste the results from chat.openai.com into {result_path}")


def check_chatgpt_complete(content, err_msg="An error occurred"):
    if content.startswith(NO_CHATGPT_MSG):
        print(err_msg)
        sys.exit(0)


def init_workspace(topic, force=False):
    """Initialize a new skills-framework workspace for the given topic."""
    topic_slug = slugify(topic)
    base_dir = os.path.join("work", topic_slug)
    generators_dir = os.path.join(base_dir, "generators")

    if os.path.exists(base_dir):
        if force:
            shutil.rmtree(base_dir)
            print(f"Removed existing directory {base_dir}")
        else:
            print(f"Directory {base_dir} already exists; use --force to re-initialize.")
            return

    os.makedirs(generators_dir, exist_ok=True)
    print(f"Created workspace structure under {base_dir}")

    # Migrate existing files for this topic
    old_generators_dir = os.path.join("work", "files-to-paste-into-chatgpt")
    old_results_dir = os.path.join("work", "results-from-chatgpt")
    migrated = False
    for old in glob.glob(os.path.join(old_generators_dir, f"{topic_slug}-*.md")):
        new_name = os.path.basename(old).replace(f"{topic_slug}-", "")
        shutil.move(old, os.path.join(generators_dir, new_name))
        migrated = True
    for old in glob.glob(os.path.join(old_results_dir, f"{topic_slug}-*.md")):
        new_name = os.path.basename(old).replace(f"{topic_slug}-", "")
        shutil.move(old, os.path.join(base_dir, new_name))
        migrated = True
    if migrated:
        print("Migrated existing topic-specific files into new workspace.")


def main():
    # Dispatch subcommands
    if args.command == "init":
        init_workspace(topic=args.topic, force=args.force)
        return

    if args.command == "render":
        if not args.topic:
            raise ValueError("Topic is required. Use render <topic> <artifact> to specify the topic and artifact.")

        topic_slug = slugify(args.topic)
        base_dir = os.path.join("work", topic_slug)
        generators_dir = os.path.join(base_dir, "generators")

        # Create the skill framework first and exit
        if args.artifact == "skill-framework":
            create_artifact(args.topic, args.artifact)
            sys.exit(1)

        # Load previously pasted skill framework
        skill_fw_path = os.path.join(base_dir, "skill-framework.md")
        skill_framework = load_file(
            skill_fw_path,
            err_msg=f"Skill framework for topic {args.topic} not found. Please run init and render skill-framework first.",
        )
        check_chatgpt_complete(
            skill_framework,
            err_msg=(
                f"ERROR: Paste {os.path.join(generators_dir, 'skill-framework.md')} into chat.openai.com "
                f"and copy the results to {skill_fw_path}."
            ),
        )

        # Now render the requested artifact
        if args.artifact == "knowledge-check-blueprint":
            create_artifact(args.topic, args.artifact, {"skill_framework": skill_framework})
        elif args.artifact == "lab-environment-blueprint":
            create_artifact(args.topic, args.artifact, {"skill_framework": skill_framework})
        elif args.artifact == "skill-framework-verifier":
            if not args.mcp_tools_fn:
                raise ValueError(
                    "MCP tools function file is required for skill-framework-verifier. "
                    "Use --mcp-tools-fn to specify the file."
                )
            mcp_context = load_file(args.mcp_tools_fn)
            create_artifact(
                args.topic,
                args.artifact,
                {"skill_framework": skill_framework, "mcp_context": mcp_context},
            )
        else:
            print(
                "Unknown artifact. Supported artifacts: skill-framework, knowledge-check-blueprint, "
                "lab-environment-blueprint, skill-framework-verifier"
            )
        return

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nProcess interrupted by user. Exiting...")
        sys.exit(0)
    except Exception as e:
        print(f"An error occurred: {e}")
        # Print a stack trace for debugging
        import traceback

        traceback.print_exc()
        sys.exit(1)
